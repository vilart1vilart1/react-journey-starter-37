using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Security.Cryptography;

namespace LMobile.Gen3LicenseManagement {
	public sealed class LicenseRequest : Gen3LicenseRequest {
		private readonly int myVersion;
		private readonly string myContractNumber;
		private readonly Guid myProjectGuid;
		private readonly string myInstallationType;
		private readonly string myInstallationLocation;
		private readonly byte[] myHardwareKey;
		internal byte[] GetLicenseDataKey() {
			var bytes = Encoding.UTF8.GetBytes(myInstallationLocation);
			var sha = SHA256Managed.Create();
			var locationKey = sha.ComputeHash(bytes);
			var result = new byte[64];
			for (int index = 0; index < 32; index++) {
				result[index * 2] = locationKey[index];
				result[index * 2 + 1] = myHardwareKey[index];
			}
			return result;
		}
		private static readonly byte[] PrivateKeyBytes = new byte[] { 0x11, 0x82, 0x01, 0x00, 0x8A, 0x10, 0xE4, 0xCA, 0xE5, 0x51, 0x4F, 0x87, 0xAC, 0xCD, 0xBC, 0x0A, 0xFB, 0x29, 0x91, 0xC5, 0x62, 0x2B, 0x07, 0xAA, 0xBE, 0x18, 0xFF, 0xD0, 0xF5, 0x17, 0x1C, 0x81, 0x4A, 0x7E, 0x69, 0xC2, 0x10, 0x2E, 0xE7, 0x8F, 0x36, 0xBF, 0xFB, 0xD6, 0x66, 0xEE, 0xD8, 0x66, 0x4E, 0xB8, 0x7D, 0x0D, 0x07, 0x6B, 0x06, 0x4B, 0x1E, 0xF4, 0x2A, 0x18, 0xDE, 0x3C, 0x56, 0x4B, 0x5F, 0xE8, 0xD4, 0xEA, 0xDE, 0xCB, 0xF6, 0xB5, 0xE7, 0xD7, 0x39, 0xB3, 0x3D, 0x3C, 0x9D, 0x53, 0xD7, 0x3C, 0x79, 0x04, 0xB1, 0x11, 0xCE, 0xFE, 0xA1, 0xCD, 0x3E, 0xA8, 0x07, 0x33, 0x04, 0xFE, 0xFC, 0x07, 0x0E, 0xF1, 0xDA, 0x65, 0xDD, 0xFB, 0x08, 0x28, 0xDC, 0x05, 0x10, 0xFB, 0x13, 0x46, 0xBE, 0x8E, 0x44, 0xC0, 0x94, 0x60, 0x8E, 0x8C, 0xCB, 0xC2, 0xF4, 0x40, 0x87, 0xEC, 0x78, 0x8F, 0xE3, 0x9C, 0x7D, 0x5A, 0x9F, 0x2B, 0x8A, 0x0E, 0x08, 0xC7, 0xE2, 0x4B, 0x0A, 0x1D, 0x71, 0xBF, 0x2C, 0x48, 0x99, 0xAA, 0x1F, 0xD5, 0x76, 0x74, 0x9C, 0x04, 0x1C, 0x1B, 0x99, 0xF5, 0x21, 0xA5, 0x74, 0xBC, 0x47, 0x06, 0x66, 0x6E, 0xE2, 0x09, 0x45, 0x03, 0xF1, 0xB0, 0x4F, 0xA2, 0x38, 0x15, 0x4B, 0x22, 0x14, 0x0B, 0xF1, 0x65, 0x31, 0x0F, 0x00, 0x0D, 0x6B, 0x1C, 0x97, 0xCB, 0x0F, 0x97, 0x17, 0x97, 0xAE, 0xA4, 0xF8, 0x10, 0x89, 0x65, 0x71, 0xDB, 0x72, 0x3F, 0x6C, 0x8B, 0xF6, 0xEA, 0xAF, 0xEA, 0x7C, 0x5A, 0x61, 0x61, 0x1F, 0xFF, 0xEB, 0xCC, 0x54, 0x9A, 0xE4, 0xBB, 0xD2, 0xEC, 0xDD, 0xD0, 0xA3, 0xFD, 0x92, 0x2D, 0x18, 0x9D, 0x35, 0x44, 0x99, 0x3E, 0x72, 0xDF, 0xDF, 0xC0, 0x89, 0x79, 0x19, 0x41, 0xD5, 0x0E, 0x4A, 0xFE, 0xE2, 0x1D, 0x23, 0x12, 0x5D, 0x92, 0x6F, 0x5E, 0x36, 0x98, 0x8B, 0xCD, 0x11, 0x03, 0x01, 0x00, 0x01, 0x11, 0x82, 0x00, 0x7C, 0x18, 0x2D, 0x1C, 0x74, 0xBA, 0xFD, 0xA9, 0xAB, 0xD7, 0x0B, 0x32, 0x2F, 0x87, 0xB0, 0x7E, 0xE1, 0xFA, 0x5D, 0x1C, 0xC9, 0x5A, 0x3C, 0xEC, 0x7A, 0xAE, 0x38, 0x2F, 0xB9, 0x5E, 0x1F, 0xFE, 0x8E, 0x7F, 0x2A, 0x20, 0x1E, 0x0C, 0xB6, 0xF5, 0x81, 0x75, 0x22, 0x49, 0xEA, 0x6D, 0x85, 0xF0, 0x64, 0xFF, 0x7C, 0x1B, 0x9F, 0x09, 0xC4, 0xA0, 0xAF, 0x77, 0x39, 0xF4, 0xEB, 0x92, 0xA1, 0x75, 0x2D, 0xA5, 0xD3, 0xEC, 0xB2, 0x22, 0x4F, 0xB9, 0x5B, 0xCC, 0x14, 0x78, 0x9C, 0x17, 0xBD, 0x8A, 0x4B, 0x00, 0xFF, 0xB4, 0xFC, 0x87, 0x36, 0xCE, 0xDE, 0x11, 0xAC, 0x66, 0xE6, 0xEE, 0x0D, 0x2F, 0xB2, 0xA6, 0x26, 0xBC, 0x10, 0x1C, 0x71, 0x8D, 0x98, 0x32, 0xA3, 0xA3, 0xCD, 0x78, 0xA0, 0x31, 0x1B, 0xEC, 0x21, 0x94, 0x49, 0x3C, 0xC4, 0x3F, 0x10, 0x2C, 0xAA, 0x3C, 0x62, 0x4F, 0x70, 0x96, 0xE6, 0x4D, 0xD5, 0x8C, 0x8F, 0xAB, 0x42, 0x53, 0x29, 0x91, 0x30, 0x9C, 0xF3, 0x79, 0x95, 0xF7, 0xAC, 0xE9, 0x3F, 0xF4, 0x32, 0xA8, 0x6D, 0x8E, 0xDD, 0x61, 0x75, 0x81, 0x19, 0x13, 0xB6, 0xDA, 0x4D, 0xF5, 0x35, 0x65, 0xAF, 0x27, 0x1B, 0xA6, 0xB1, 0xC5, 0xFA, 0xEC, 0x73, 0x75, 0x29, 0x1D, 0xD6, 0x29, 0x2C, 0xAF, 0xB7, 0x78, 0x19, 0x70, 0xCE, 0xE0, 0xFA, 0x36, 0x4A, 0x7B, 0xE0, 0x7C, 0x79, 0x57, 0x20, 0xF1, 0x46, 0x6C, 0x3A, 0xD9, 0xD9, 0xD9, 0x57, 0x7B, 0xCB, 0xF6, 0x90, 0x8E, 0xD8, 0x77, 0x1E, 0x8D, 0x11, 0xC4, 0xE9, 0x1C, 0x9C, 0x9C, 0x0C, 0xE0, 0xF6, 0xD0, 0xF7, 0x4C, 0x2E, 0xA4, 0x20, 0xF6, 0xEE, 0x83, 0x19, 0xE3, 0x5C, 0x65, 0x0C, 0x28, 0xA5, 0x01, 0x82, 0x6B, 0x5B, 0xE7, 0x99, 0x90, 0x94, 0xBE, 0xBC, 0x43, 0xAC, 0x36, 0x55, 0x06, 0xF1, 0xB0, 0x2F, 0x01, 0x11, 0x81, 0x01, 0x00, 0xBC, 0x4F, 0x1A, 0x8F, 0xFC, 0xF1, 0x1C, 0x9B, 0xD6, 0xE0, 0xD1, 0x00, 0x11, 0xC6, 0xDE, 0x74, 0x64, 0x73, 0xB2, 0xD7, 0x3E, 0x65, 0x4E, 0x70, 0xFF, 0xA0, 0x6A, 0x1E, 0xDA, 0xBD, 0xEB, 0x8E, 0xEE, 0x73, 0x28, 0xD2, 0x29, 0x81, 0x6D, 0x01, 0x46, 0xDF, 0xF9, 0xB2, 0x3B, 0xF2, 0x9A, 0xEF, 0x13, 0x0B, 0xC7, 0x37, 0x1D, 0x31, 0x3C, 0x42, 0x30, 0xCB, 0xD8, 0xEE, 0xE0, 0x5C, 0xF6, 0x15, 0xFD, 0xF3, 0x58, 0x9F, 0xF2, 0x9D, 0xF1, 0xB8, 0xE2, 0x38, 0x91, 0x63, 0x4D, 0x99, 0xB9, 0xE2, 0x56, 0x48, 0x46, 0x34, 0x91, 0x2D, 0xA0, 0xBF, 0x70, 0x1C, 0x1A, 0x78, 0xB9, 0xEF, 0xF8, 0xAC, 0x5C, 0x25, 0x56, 0x19, 0x9C, 0x44, 0x69, 0xFD, 0x97, 0x30, 0x56, 0x6B, 0x9D, 0x63, 0xF5, 0x91, 0x7E, 0x01, 0x1F, 0x4C, 0xBD, 0x80, 0x24, 0xF6, 0xAF, 0xBA, 0x1E, 0x66, 0xF4, 0xF0, 0xE1, 0x8D, 0x11, 0x81, 0x01, 0x00, 0xBB, 0xB2, 0x3D, 0xB3, 0xFD, 0xF0, 0xF8, 0x45, 0x0F, 0x08, 0x84, 0xD1, 0x90, 0x9C, 0x5D, 0xAA, 0x76, 0x10, 0x56, 0xA2, 0x08, 0xF4, 0x1C, 0x15, 0x82, 0x89, 0x07, 0xAC, 0x04, 0x95, 0x7C, 0x17, 0x84, 0xD9, 0x79, 0xC2, 0x93, 0x87, 0x83, 0x3E, 0xFE, 0x34, 0x2B, 0xA9, 0x9F, 0x93, 0xF7, 0x91, 0x5A, 0x48, 0x97, 0x40, 0x26, 0x61, 0x4A, 0xC7, 0xE3, 0x16, 0xB1, 0xC7, 0x0E, 0x5F, 0x40, 0xDD, 0x44, 0x29, 0x9E, 0x68, 0xFD, 0xC2, 0x1C, 0x1A, 0x45, 0x2D, 0x10, 0x48, 0x25, 0xE8, 0xBB, 0x63, 0x35, 0x67, 0xC4, 0xF4, 0x5D, 0x98, 0xD6, 0x04, 0xCB, 0xB5, 0xCB, 0xC5, 0x80, 0xA9, 0x06, 0xF1, 0x61, 0xE7, 0xEE, 0x7B, 0x69, 0x7F, 0xBE, 0xFE, 0xA2, 0x03, 0x43, 0x82, 0xB2, 0x9C, 0x53, 0xF6, 0xED, 0x12, 0x0E, 0xD0, 0xE8, 0x28, 0xC6, 0xD5, 0x8B, 0xC1, 0x4D, 0xA2, 0xB8, 0x3D, 0x23, 0x41, 0x11, 0x81, 0x00, 0x3C, 0xA6, 0x6D, 0xB3, 0xBA, 0x90, 0x1D, 0xDA, 0xC3, 0x96, 0x9D, 0x3A, 0x1C, 0x7F, 0xA4, 0xDE, 0x70, 0x0C, 0x23, 0xA9, 0xD7, 0xDA, 0xE1, 0x2C, 0xDB, 0xE8, 0x5A, 0xC5, 0x9D, 0x46, 0x56, 0x3C, 0x2E, 0xE8, 0xC0, 0x59, 0x10, 0x2D, 0x33, 0x62, 0x99, 0xE5, 0x41, 0x92, 0xFA, 0x63, 0xE5, 0x2A, 0xE3, 0x43, 0x83, 0xE2, 0x68, 0x70, 0x97, 0x2B, 0xEA, 0x73, 0x7D, 0x67, 0x52, 0xB4, 0x1E, 0x3E, 0x6F, 0x10, 0x95, 0x96, 0xCE, 0x99, 0xB8, 0x65, 0x07, 0xD7, 0x98, 0x5C, 0x17, 0x7E, 0x4F, 0xB4, 0x6A, 0x7D, 0xD4, 0xBE, 0xD1, 0x93, 0x94, 0x96, 0x94, 0x11, 0x39, 0x25, 0x71, 0x1D, 0xAD, 0x46, 0x36, 0x57, 0x80, 0x27, 0xB7, 0x81, 0x01, 0x72, 0x3F, 0xE3, 0xBD, 0xB1, 0xE3, 0x7B, 0x72, 0x78, 0x6D, 0xD1, 0x06, 0xB7, 0xBC, 0xC1, 0x2D, 0x26, 0x96, 0xEA, 0xA7, 0x28, 0x19, 0xF4, 0x0B, 0x71, 0x11, 0x81, 0x00, 0x18, 0x66, 0xAB, 0xAE, 0xE2, 0xAC, 0x99, 0x1A, 0x21, 0x42, 0x32, 0x42, 0x2C, 0x52, 0xA7, 0xBA, 0xA9, 0x6E, 0xA6, 0x54, 0x9A, 0x65, 0x61, 0xE1, 0x49, 0xFF, 0x16, 0x88, 0x3E, 0x70, 0x50, 0x99, 0x9E, 0x23, 0xC7, 0xB8, 0x8C, 0x05, 0x6A, 0x02, 0x9E, 0x79, 0x99, 0xD3, 0x8B, 0x73, 0x69, 0x13, 0xF4, 0x70, 0xCB, 0x79, 0x03, 0x84, 0x52, 0x7C, 0x7A, 0x01, 0x51, 0x4B, 0x57, 0x8A, 0xFA, 0x9B, 0xC9, 0x68, 0xBF, 0xB7, 0x56, 0x86, 0x0D, 0xB1, 0x3C, 0x9D, 0x07, 0x28, 0xDA, 0x04, 0xCF, 0x97, 0xAE, 0x31, 0xB7, 0x61, 0x2D, 0x69, 0xD9, 0x28, 0xF6, 0x72, 0xC3, 0xF3, 0x01, 0x2E, 0xF8, 0x40, 0x19, 0x42, 0x55, 0xB6, 0xA5, 0x98, 0x7D, 0xF4, 0x0C, 0x8B, 0xF0, 0x12, 0xE5, 0xB5, 0x7D, 0x14, 0xF4, 0xED, 0x0C, 0x10, 0x0C, 0x9E, 0x80, 0x7A, 0xF2, 0x98, 0x46, 0xC7, 0x88, 0xBC, 0x2A, 0x01, 0x11, 0x81, 0x00, 0x58, 0xEC, 0xDF, 0x28, 0x5E, 0xC0, 0xBB, 0xF9, 0xCD, 0xC3, 0xD7, 0xFA, 0x91, 0x75, 0xB9, 0x70, 0x4C, 0x4A, 0xD9, 0x4D, 0xD7, 0x00, 0x8B, 0xE3, 0x18, 0xD4, 0xA5, 0x30, 0xB1, 0x85, 0x51, 0xA4, 0x51, 0x0C, 0x28, 0x5D, 0x1D, 0x24, 0xBC, 0xAA, 0x9F, 0x5D, 0xDE, 0x92, 0x67, 0xBF, 0x0F, 0x68, 0xA9, 0x84, 0xFE, 0xCE, 0xE6, 0xE1, 0xC5, 0x6C, 0x8B, 0xC0, 0x72, 0x4A, 0x4E, 0x96, 0xD2, 0x65, 0xFE, 0xAF, 0xBE, 0x00, 0xAE, 0x6B, 0xEF, 0xEA, 0xA7, 0xC6, 0xF0, 0xF9, 0xDD, 0xF7, 0x35, 0xA9, 0x1D, 0x7F, 0x6C, 0xAF, 0x12, 0x2D, 0x48, 0xE4, 0x78, 0xC4, 0x12, 0xD7, 0x9D, 0xA4, 0x22, 0x94, 0xA7, 0xF0, 0x22, 0x46, 0x09, 0xE5, 0xB5, 0x73, 0x46, 0x64, 0xF7, 0x47, 0xA3, 0x51, 0x48, 0x01, 0x34, 0x67, 0x4B, 0xE0, 0xA9, 0xBB, 0x72, 0x27, 0xD9, 0xF5, 0xD4, 0xFA, 0x1C, 0x51, 0xE9, 0x8E };
		public LicenseRequest(string request) {
			var requestBytes = ByteString.ToBytes(request);
			byte[] decryptedRequestBytes;
			using (var keyStream = new MemoryStream(PrivateKeyBytes, false)) {
				var privateKey = RsaCrypto.ReadPrivateKey(keyStream);
				decryptedRequestBytes = RsaCrypto.DecryptCompressed(privateKey, requestBytes);
			}
			using (var requestStream = new MemoryStream(decryptedRequestBytes, false)) {
				var reader = new PortableBitStreamReader(requestStream);
				myVersion = reader.ReadInt32();
				myContractNumber = reader.ReadString();
				myProjectGuid = reader.ReadGuid();
				reader.ReadString(); // ProjectType
				myInstallationType = reader.ReadString();
				myInstallationLocation = reader.ReadString();
				myHardwareKey = reader.ReadByteArray();
				if ((myInstallationLocation.Length <= 0) || (myHardwareKey.Length != 32)) {
					throw new InvalidDataInPortableBitStreamException();
				}
			}
		}
		public int Version {
			get { return myVersion; }
		}
		public string ContractNumber {
			get { return myContractNumber; }
		}
		public Guid ProjectGuid {
			get { return myProjectGuid; }
		}
		[Obsolete("Just a leftover from Gen2.", false)]
		public string ProjectType {
			get { return null; }
		}
		public string InstallationType {
			get { return myInstallationType; }
		}
		public string InstallationLocation {
			get { return myInstallationLocation; }
		}
		public string HardwareKey {
			get { return ByteString.ToString(myHardwareKey); }
		}
	}
}
